// const Login = () => {
//     const { userLoggedIn } = useAuth()

//     const [email, setEmail] = useState('')
//     const [password, setPassword] = useState('')
//     const [isSigningIn, setIsSigningIn] = useState(false)
//     const [errorMessage, setErrorMessage] = useState('')

//     const onSubmit = async (e) => {
//         e.preventDefault()
//         if(!isSigningIn) {
//             setIsSigningIn(true)
//             await doSignInWithEmailAndPassword(email, password)
//             // doSendEmailVerification()
//         }
//     }

//     const onGoogleSignIn = (e) => {
//         e.preventDefault()
//         if (!isSigningIn) {
//             setIsSigningIn(true)
//             doSignInWithGoogle().catch(err => {
//                 setIsSigningIn(false)
//             })
//         }
//     }

//     return (
//         <div>
//             {userLoggedIn && (<Navigate to={'/home'} replace={true} />)}

//             <main className="w-full h-screen flex self-center place-content-center place-items-center">
//                 <div className="w-96 text-gray-600 space-y-5 p-4 shadow-xl border rounded-xl">
//                     <div className="text-center">
//                         <div className="mt-2">
//                             <h3 className="text-gray-800 text-xl font-semibold sm:text-2xl">Welcome Back</h3>
//                         </div>
//                     </div>
//                     <form
//                         onSubmit={onSubmit}
//                         className="space-y-5"
//                     >
//                         <div>
//                             <label className="text-sm text-gray-600 font-bold">
//                                 Email
//                             </label>
//                             <input
//                                 type="email"
//                                 autoComplete='email'
//                                 required
//                                 value={email} onChange={(e) => { setEmail(e.target.value) }}
//                                 className="w-full mt-2 px-3 py-2 text-gray-500 bg-transparent outline-none border focus:border-indigo-600 shadow-sm rounded-lg transition duration-300"
//                             />
//                         </div>


//                         <div>
//                             <label className="text-sm text-gray-600 font-bold">
//                                 Password
//                             </label>
//                             <input
//                                 type="password"
//                                 autoComplete='current-password'
//                                 required
//                                 value={password} onChange={(e) => { setPassword(e.target.value) }}
//                                 className="w-full mt-2 px-3 py-2 text-gray-500 bg-transparent outline-none border focus:border-indigo-600 shadow-sm rounded-lg transition duration-300"
//                             />
//                         </div>

//                         {errorMessage && (
//                             <span className='text-red-600 font-bold'>{errorMessage}</span>
//                         )}

//                         <button
//                             type="submit"
//                             disabled={isSigningIn}
//                             className={`w-full px-4 py-2 text-white font-medium rounded-lg ${isSigningIn ? 'bg-gray-300 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700 hover:shadow-xl transition duration-300'}`}
//                         >
//                             {isSigningIn ? 'Signing In...' : 'Sign In'}
//                         </button>
//                     </form>
//                     <p className="text-center text-sm">Don't have an account? <Link to={'/register'} className="hover:underline font-bold">Sign up</Link></p>
//                     <div className='flex flex-row text-center w-full'>
//                         <div className='border-b-2 mb-2.5 mr-2 w-full'></div><div className='text-sm font-bold w-fit'>OR</div><div className='border-b-2 mb-2.5 ml-2 w-full'></div>
//                     </div>
//                     <button
//                         disabled={isSigningIn}
//                         onClick={(e) => { onGoogleSignIn(e) }}
//                         className={`w-full flex items-center justify-center gap-x-3 py-2.5 border rounded-lg text-sm font-medium  ${isSigningIn ? 'cursor-not-allowed' : 'hover:bg-gray-100 transition duration-300 active:bg-gray-100'}`}>
//                         <svg className="w-5 h-5" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
//                             <g clipPath="url(#clip0_17_40)">
//                                 <path d="M47.532 24.5528C47.532 22.9214 47.3997 21.2811 47.1175 19.6761H24.48V28.9181H37.4434C36.9055 31.8988 35.177 34.5356 32.6461 36.2111V42.2078H40.3801C44.9217 38.0278 47.532 31.8547 47.532 24.5528Z" fill="#4285F4" />
//                                 <path d="M24.48 48.0016C30.9529 48.0016 36.4116 45.8764 40.3888 42.2078L32.6549 36.2111C30.5031 37.675 27.7252 38.5039 24.4888 38.5039C18.2275 38.5039 12.9187 34.2798 11.0139 28.6006H3.03296V34.7825C7.10718 42.8868 15.4056 48.0016 24.48 48.0016Z" fill="#34A853" />
//                                 <path d="M11.0051 28.6006C9.99973 25.6199 9.99973 22.3922 11.0051 19.4115V13.2296H3.03298C-0.371021 20.0112 -0.371021 28.0009 3.03298 34.7825L11.0051 28.6006Z" fill="#FBBC04" />
//                                 <path d="M24.48 9.49932C27.9016 9.44641 31.2086 10.7339 33.6866 13.0973L40.5387 6.24523C36.2 2.17101 30.4414 -0.068932 24.48 0.00161733C15.4055 0.00161733 7.10718 5.11644 3.03296 13.2296L11.005 19.4115C12.901 13.7235 18.2187 9.49932 24.48 9.49932Z" fill="#EA4335" />
//                             </g>
//                             <defs>
//                                 <clipPath id="clip0_17_40">
//                                     <rect width="48" height="48" fill="white" />
//                                 </clipPath>
//                             </defs>
//                         </svg>
//                         {isSigningIn ? 'Signing In...' : 'Continue with Google'}
//                     </button>
//                 </div>
//             </main>
//         </div>
//     )
// }

// export default Login
// import { TextField, PrimaryButton, DefaultButton, Spinner } from '@fluentui/react';



// const Login = () => {
//     const { userLoggedIn } = useAuth();

//     const [email, setEmail] = useState('');
//     const [password, setPassword] = useState('');
//     const [isSigningIn, setIsSigningIn] = useState(false);
//     const [errorMessage, setErrorMessage] = useState('');

//     const onSubmit = async (e) => {
//         e.preventDefault();
//         if (!isSigningIn) {
//             setIsSigningIn(true);
//             await doSignInWithEmailAndPassword(email, password).catch(err => {
//                 setErrorMessage(err.message);
//                 setIsSigningIn(false);
//             });
//         }
//     };

//     const onGoogleSignIn = (e) => {
//         e.preventDefault();
//         if (!isSigningIn) {
//             setIsSigningIn(true);
//             doSignInWithGoogle().catch(err => {
//                 setErrorMessage(err.message);
//                 setIsSigningIn(false);
//             });
//         }
//     };

//     return (
//         <div>
//             {userLoggedIn && (<Navigate to={'/home'} replace={true} />)}

//             <main className="w-full h-screen flex self-center place-content-center place-items-center">
//                 <div className="w-96 text-gray-600 space-y-5 p-4 shadow-xl border rounded-xl">
//                     <div className="text-center">
//                         <div className="mt-2">
//                             <h3 className="text-gray-800 text-xl font-semibold sm:text-2xl">Welcome Back</h3>
//                         </div>
//                     </div>
//                     <form onSubmit={onSubmit} className="space-y-5">
//                         <div>
//                             <TextField
//                                 label="Email"
//                                 type="email"
//                                 autoComplete="email"
//                                 required
//                                 value={email}
//                                 onChange={(e, newValue) => setEmail(newValue)}
//                             />
//                         </div>

//                         <div>
//                             <TextField
//                                 label="Password"
//                                 type="password"
//                                 autoComplete="current-password"
//                                 required
//                                 value={password}
//                                 onChange={(e, newValue) => setPassword(newValue)}
//                             />
//                         </div>

//                         {errorMessage && (
//                             <span className="text-red-600 font-bold">{errorMessage}</span>
//                         )}

//                         <PrimaryButton
//                             type="submit"
//                             disabled={isSigningIn}
//                             text={isSigningIn ? 'Signing In...' : 'Sign In'}
//                         />
//                     </form>
//                     <p className="text-center text-sm">Don't have an account? <Link to={'/register'} className="hover:underline font-bold">Sign up</Link></p>
//                     <div className="flex flex-row text-center w-full">
//                         <div className="border-b-2 mb-2.5 mr-2 w-full"></div>
//                         <div className="text-sm font-bold w-fit">OR</div>
//                         <div className="border-b-2 mb-2.5 ml-2 w-full"></div>
//                     </div>
//                     <DefaultButton
//                         disabled={isSigningIn}
//                         onClick={onGoogleSignIn}
                        
//                         text={isSigningIn ? 'Signing In...' : 'Continue with Google'}
//                         iconProps={{ iconName: 'GoogleLogo' }}
//                     />
//                 </div>
//             </main>
//         </div>
//     );
// };

// export default Login;






// import React, { useState } from 'react';
// import { Navigate, Link } from 'react-router-dom';
// import { useAuth } from '../../../contexts/authContext';
// import { doSignInWithEmailAndPassword, doSignInWithGoogle } from '../../../firebase/auth';
// import {
//     TextField,
//     PrimaryButton,
//     DefaultButton,
//     Stack,
//     Text,
//     MessageBar,
//     MessageBarType,
// } from '@fluentui/react';




// const Login = () => {
//     const { userLoggedIn } = useAuth();

//     const [email, setEmail] = useState('');
//     const [password, setPassword] = useState('');
//     const [isSigningIn, setIsSigningIn] = useState(false);
//     const [errorMessage, setErrorMessage] = useState('');

//     const onSubmit = async (e) => {
//         e.preventDefault();
//         if (!isSigningIn) {
//             setIsSigningIn(true);
//             try {
//                 await doSignInWithEmailAndPassword(email, password);
//             } catch (err) {
//                 setErrorMessage(err.message);
//             } finally {
//                 setIsSigningIn(false);
//             }
//         }
//     };

//     const onGoogleSignIn = async (e) => {
//         e.preventDefault();
//         if (!isSigningIn) {
//             setIsSigningIn(true);
//             try {
//                 await doSignInWithGoogle();
//             } catch (err) {
//                 setErrorMessage(err.message);
//             } finally {
//                 setIsSigningIn(false);
//             }
//         }
//     };

//     return (
//         <div>
//             {userLoggedIn && <Navigate to="/home" replace={true} />}

//             <Stack
//                 horizontalAlign="center"
//                 verticalAlign="center"
//                 verticalFill
//                 styles={{
//                     root: { width: '100%', height: '100vh' },
//                 }}
//             >
//                 <Stack
//                     tokens={{ childrenGap: 15 }}
//                     styles={{
//                         root: {
//                             width: '90%',
//                             maxWidth: 400,
//                             padding: 20,
//                             boxShadow: '0 0 10px rgba(0,0,0,0.1)',
//                             borderRadius: 10,
//                         },
//                     }}
//                 >
//                     <Text variant="xLarge" block>
//                         Welcome Back
//                     </Text>
//                     <form onSubmit={onSubmit}>
//                         <Stack tokens={{ childrenGap: 10 }}>
//                             <TextField
//                                 label="Email"
//                                 type="email"
//                                 autoComplete="email"
//                                 required
//                                 value={email}
//                                 onChange={(e, newValue) => setEmail(newValue)}
//                                 disabled={isSigningIn}
//                             />
//                             <TextField
//                                 label="Password"
//                                 type="password"
//                                 autoComplete="current-password"
//                                 required
//                                 value={password}
//                                 onChange={(e, newValue) => setPassword(newValue)}
//                                 disabled={isSigningIn}
//                             />
//                             {errorMessage && (
//                                 <MessageBar messageBarType={MessageBarType.error}>
//                                     {errorMessage}
//                                 </MessageBar>
//                             )}
//                             <PrimaryButton
//                                 type="submit"
//                                 text={isSigningIn ? 'Signing In...' : 'Sign In'}
//                                 disabled={isSigningIn}
//                                 styles={{ root: { width: '100%' } }}
//                             />
//                         </Stack>
//                     </form>
//                     <Text variant="small" block>
//                         Don't have an account?{' '}
//                         <Link to="/register">Sign up</Link>
//                     </Text>
//                     <Stack horizontal verticalAlign="center" tokens={{ childrenGap: 5 }}>
//                         <div
//                             style={{
//                                 borderBottom: '1px solid #ccc',
//                                 flexGrow: 1,
//                             }}
//                         />
//                         <Text variant="small">OR</Text>
//                         <div
//                             style={{
//                                 borderBottom: '1px solid #ccc',
//                                 flexGrow: 1,
//                             }}
//                         />
//                     </Stack>
//                     <DefaultButton
//                         onClick={onGoogleSignIn}
//                         text={isSigningIn ? 'Signing In...' : 'Continue with Google'}
//                         disabled={isSigningIn}
//                         styles={{ root: { width: '100%' } }}
//                         iconProps={{ iconName: 'GoogleLogo' }}
//                     />
//                 </Stack>
//             </Stack>
//         </div>
//     );
// };

// export default Login;













?Original Navbar


// // Navbar.jsx
// import React, { useState } from 'react';
// import { Link, useNavigate } from 'react-router-dom'
// import { useAuth } from '../../contexts/authContext'
// import { doSignOut } from '../../firebase/auth'
// import './Navbar.css';

// const Navbar = () => {
//   const [isMenuOpen, setIsMenuOpen] = useState(false);
//     const navigate = useNavigate()
//     const { userLoggedIn } = useAuth()
//   const toggleMenu = () => {
//     setIsMenuOpen(!isMenuOpen);
//   };

//   return (
//     <div className="bodyc">
//       <nav className="navbar">
//         <div className="navbar-header">Expenses Tracker</div>
//         <button className="hamburger" onClick={toggleMenu}>
//           <span className="hamburger-line"></span>
//           <span className="hamburger-line"></span>
//           <span className="hamburger-line"></span>
//         </button>
        
//         <div className={`navbar-container ${isMenuOpen ? 'open' : ''}`}>
//           <a href="#daily" className="nav-link">Daily View</a>
//           <a href="#weekly" className="nav-link">Weekly View</a>
//           <a href="#monthly" className="nav-link">Monthly View</a>
//         </div>
//         <div className={`navbar-container ${isMenuOpen ? 'open' : ''}`}>
//           {
//             userLoggedIn
//               ?
//               <>
//                 <button onClick={() => { doSignOut().then(() => { navigate('/login') }) }} className='text-sm text-blue-600 underline'>Logout</button>
//               </>
//               :
//               <>
//                 <Link className='text-sm text-blue-600 underline' to={'/login'}>Login</Link>
//                 <Link className='text-sm text-blue-600 underline' to={'/register'}>Register New Account</Link>
//               </>
//           }
//           </div>
//       </nav>
//     </div>
//   );
// };

// export default Navbar;





// import React, { useState } from 'react';
// import { Link, useNavigate } from 'react-router-dom';
// import { useAuth } from '../../contexts/authContext';
// import { doSignOut } from '../../firebase/auth';
// import {
//     Button,
//     Title3,
//     TabList,
//     Tab,
//     Menu,
//     MenuTrigger,
//     MenuPopover,
//     MenuList,
//     MenuItem,
//     tokens,
//     makeStyles,
//     mergeClasses,
// } from "@fluentui/react-components";
// import { List24Regular } from "@fluentui/react-icons";

// const useStyles = makeStyles({
//     navContainer: {
//         display: 'flex',
//         justifyContent: 'space-between',
//         alignItems: 'center',
//         padding: '8px 20px',
//         backgroundColor: '#f3f3f3',
//         borderBottom: `1px solid ${tokens.colorNeutralStroke1}`,
//         width: '100%',
//         boxSizing: 'border-box',
//     },
//     brand: {
//         fontWeight: tokens.fontWeightSemibold,
//         color: tokens.colorNeutralForeground1,
//         padding: '4px 0',
//         margin: 0,
//     },
//     navigation: {
//         display: 'flex',
//         alignItems: 'center',
//         gap: '16px',
//         '@media (max-width: 768px)': {
//             display: 'none',
//         },
//     },
//     tabs: {
//         minWidth: '300px',
//     },
//     authButtons: {
//         display: 'flex',
//         gap: '8px',
//         '@media (max-width: 768px)': {
//             display: 'none',
//         },
//     },
//     mobileMenuButton: {
//         display: 'none',
//         '@media (max-width: 768px)': {
//             display: 'block',
//         },
//     },
//     mobileMenu: {
//         padding: '8px 0',
//         minWidth: '200px',
//     },
// });

// const Navbar = () => {
//     const styles = useStyles();
//     const [selectedTab, setSelectedTab] = useState('daily');
//     const navigate = useNavigate();
//     const { userLoggedIn } = useAuth();

//     const handleTabSelect = (event, data) => {
//         setSelectedTab(data.value);
//     };

//     const handleSignOut = async () => {
//         await doSignOut();
//         navigate('/login');
//     };

//     return (
//         <div className={styles.navContainer}>
//             <Title3 className={styles.brand}>
//                 Expenses Tracker
//             </Title3>

//             <div className={styles.navigation}>
//                 <TabList
//                     selectedValue={selectedTab}
//                     onTabSelect={handleTabSelect}
//                     className={styles.tabs}
//                 >
//                     <Tab value="daily">Daily View</Tab>
//                     <Tab value="weekly">Weekly View</Tab>
//                     <Tab value="monthly">Monthly View</Tab>
//                 </TabList>
//             </div>

//             {/* Mobile Menu */}
//             <Menu>
//                 <MenuTrigger disableButtonEnhancement>
//                     <Button
//                         icon={<List24Regular />}
//                         appearance="subtle"
//                         className={styles.mobileMenuButton}
//                     />
//                 </MenuTrigger>
//                 <MenuPopover>
//                     <MenuList className={styles.mobileMenu}>
//                         <MenuItem onClick={() => setSelectedTab('daily')}>Daily View</MenuItem>
//                         <MenuItem onClick={() => setSelectedTab('weekly')}>Weekly View</MenuItem>
//                         <MenuItem onClick={() => setSelectedTab('monthly')}>Monthly View</MenuItem>
//                         <MenuItem>
//                             {userLoggedIn ? (
//                                 <Button
//                                     appearance="subtle"
//                                     onClick={handleSignOut}
//                                     style={{ width: '100%', justifyContent: 'flex-start' }}
//                                 >
//                                     Logout
//                                 </Button>
//                             ) : (
//                                 <Button
//                                     appearance="subtle"
//                                     onClick={() => navigate('/login')}
//                                     style={{ width: '100%', justifyContent: 'flex-start' }}
//                                 >
//                                     Login
//                                 </Button>
//                             )}
//                         </MenuItem>
//                     </MenuList>
//                 </MenuPopover>
//             </Menu>

//             {/* Desktop Auth Buttons */}
//             <div className={styles.authButtons}>
//                 {userLoggedIn ? (
//                     <Button appearance="secondary" onClick={handleSignOut}>
//                         Logout
//                     </Button>
//                 ) : (
//                     <>
//                         <Button appearance="primary" onClick={() => navigate('/login')}>
//                             Login
//                         </Button>
//                         <Button appearance="secondary" onClick={() => navigate('/register')}>
//                             Register New Account
//                         </Button>
//                     </>
//                 )}
//             </div>
//         </div>
//     );
// };

// export default Navbar;


// import React, { useState } from 'react';
// import { useNavigate } from 'react-router-dom';
// import { useAuth } from '../../contexts/authContext';
// import { doSignOut } from '../../firebase/auth';
// import {
//     Button,
//     Text,
//     makeStyles,
//     OverlayDrawer,
//     DrawerHeader,
//     DrawerHeaderTitle,
//     DrawerBody,
//     Avatar,
// } from "@fluentui/react-components";
// import { List24Regular, Dismiss24Regular } from "@fluentui/react-icons";

// const useStyles = makeStyles({
//     navbar: {
//         display: 'flex',
//         justifyContent: 'space-between',
//         alignItems: 'center',
//         padding: '10px 20px',
//         backgroundColor: '#f3f2f1',
//         boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
//         position: 'relative',
//         '@media (max-width: 768px)': {
//             padding: '10px',
//         },
//     },
//     title: {
//         fontWeight: 'bold',
//         fontSize: '1.5rem',
//         '@media (max-width: 768px)': {
//             fontSize: '1.2rem',
//         },
//     },
//     navButtons: {
//         display: 'flex',
//         gap: '10px',
//         '@media (max-width: 768px)': {
//             display: 'none',
//         },
//     },
//     mobileMenuButton: {
//         '@media (min-width: 769px)': {
//             display: 'none',
//         },
//     },
//     profileInfo: {
//         display: 'flex',
//         flexDirection: 'column',
//         alignItems: 'center',
//         gap: '10px',
//         textAlign: 'center',
//     },
//     avatar: {
//         backgroundColor: '#0078D4',
//         fontSize: '1.25rem',
//         color: '#fff',
//         cursor: 'pointer', // Cursor pointer for avatar click
//     },
//     menuItem: {
//         padding: '10px 20px',
//     },
//     desktopAvatarWrapper: {
//         display: 'flex',
//         alignItems: 'center',
//         gap: '10px',
//     },
// });

// const Navbar = () => {
//     const [isDrawerOpen, setIsDrawerOpen] = useState(false);  // State for mobile drawer
//     const navigate = useNavigate();
//     const { userLoggedIn, currentUser } = useAuth();
//     const styles = useStyles();

//     const handleSignOut = async () => {
//         await doSignOut();
//         navigate('/login');
//     };

//     // Get the first letter of the user's first name
//     const getFirstLetter = (name) => name && name.charAt(0).toUpperCase();

//     // Handle avatar click to open the drawer
//     const handleAvatarClick = () => {
//         setIsDrawerOpen(true);
//     };

//     return (
//         <div className={styles.navbar}>
//             <Text className={styles.title}>Expenses Tracker</Text>

//             {/* Mobile Menu (Drawer) */}
//             <Button
//                 icon={<List24Regular />}
//                 className={styles.mobileMenuButton}
//                 appearance="transparent"
//                 onClick={() => setIsDrawerOpen(true)}  // Open the drawer on button click
//             />

//             <OverlayDrawer
//                 position="end" // Set position to 'end' to open from the right side
//                 open={isDrawerOpen}
//                 onOpenChange={(_, { open }) => setIsDrawerOpen(open)} // Handle open/close
//             >
//                 <DrawerHeader>
//                     <DrawerHeaderTitle
//                         action={
//                             <Button
//                                 appearance="subtle"
//                                 aria-label="Close"
//                                 icon={<Dismiss24Regular />}
//                                 onClick={() => setIsDrawerOpen(false)}  // Close drawer on button click
//                             />
//                         }
//                     >
//                         User Info
//                     </DrawerHeaderTitle>
//                 </DrawerHeader>
//                 <DrawerBody>
//                     {userLoggedIn ? (
//                         <div className={styles.profileInfo}>
//                             {/* Profile Picture as First Letter */}
//                             <Avatar className={styles.avatar} onClick={handleAvatarClick}>{getFirstLetter(currentUser.displayName)}</Avatar>
//                             <Text>{currentUser.displayName}</Text>
//                             <Text>{currentUser.email}</Text>
//                             <Button appearance="secondary" onClick={handleSignOut}>Logout</Button>
//                         </div>
//                     ) : (
//                         <div className={styles.profileInfo}>
//                             <Button appearance="primary" onClick={() => navigate('/login')}>Login</Button>
//                             <Button appearance="secondary" onClick={() => navigate('/register')}>Register New Account</Button>
//                         </div>
//                     )}
//                 </DrawerBody>
//             </OverlayDrawer>

//             {/* Desktop Authentication Buttons */}
//             <div className={styles.navButtons}>
//                 {userLoggedIn ? (
//                     <div className={styles.desktopAvatarWrapper}>
//                         {/* Profile info for desktop */}
//                         <Avatar className={styles.avatar} onClick={handleAvatarClick}>{getFirstLetter(currentUser.displayName)}</Avatar>
//                         <Text>{currentUser.displayName}</Text>
//                     </div>
//                 ) : (
//                     <>
//                         <Button appearance="primary" onClick={() => navigate('/login')}>
//                             Login
//                         </Button>
//                         <Button appearance="secondary" onClick={() => navigate('/register')}>
//                             Register New Account
//                         </Button>
//                     </>
//                 )}
//             </div>
//         </div>
//     );
// };

// export default Navbar;



// import logo from '../../assets/logo.png'; // Ensure the logo is in your assets folder
// import React, { useState, useEffect } from 'react';
// import { ProgressBar, Field } from '@fluentui/react-components';
// import { Navigate } from 'react-router-dom';

// const SplashScreen = () => {
//   const [isServerUp, setIsServerUp] = useState(false);
//   const [showSplash, setShowSplash] = useState(true);

//   // Check if the server is up and set the state
//   const checkServerStatus = async () => {
//     try {
//       const response = await fetch('https://expensetrackerbackend-uptz.onrender.com/api/expense/');
//       if (response.status === 200) {
//         setIsServerUp(true);
//       }
//     } catch (error) {
//       console.error('Error checking server status:', error);
//     }
//   };

//   useEffect(() => {
//     // Show splash screen for at least 3 seconds before checking the server
//     setTimeout(() => {
//       setShowSplash(false); // Hide splash screen after 3 seconds
//       checkServerStatus(); // Start checking server status after 3 seconds
//     }, 9000); // 3-second delay

//     const interval = setInterval(checkServerStatus, 5000); // Check every 5 seconds
//     return () => clearInterval(interval); // Cleanup interval
//   }, []);

//   if (isServerUp || !showSplash) {
//     return <Navigate to="/home" replace />; // Navigate to Home when the server is up or splash screen time ends
//   }

//   return (
//     <div style={styles.splashScreen}>
//       <img src={logo} alt="Logo" style={styles.logo} />
//       <Field
//         validationMessage="Server is Spinning Up..."
//         validationState="none"
//         style={styles.validationMessage}
//       >
//         <ProgressBar />
//       </Field>
//     </div>
//   );
// };

// const styles = {
//   splashScreen: {
//     display: 'flex',
//     flexDirection: 'column',
//     justifyContent: 'center',
//     alignItems: 'center',
//     height: '100vh',
//     backgroundColor: '#f3f2f1',
//     padding: '10px',
//   },
//   logo: {
//     borderRadius: '15px',
//     width: '125px',
//     height: 'auto',
//     marginBottom: '20px',
//   },
//   validationMessage: {
//     fontSize: '1.25rem', // Increase font size
//     fontWeight: '500',
//     textAlign: 'center',
//   },
// '@media (max-width: 763px)': {
//     splashScreen: {
//       padding: '5px',
//     },
//     logo: {
//       width: '20px',
//       marginBottom: '15px',
//     },
//     validationMessage: {
//       fontSize: '1rem',
//     },
//   },
// };

// export default SplashScreen;



// import React, { useState, useEffect } from 'react';
// import { useAuth } from '../../contexts/authContext';
// import {
//   makeStyles,
//   Input,
//   Button,
//   Text,
//   Field,
//   Table,
//   TableHeader,
//   TableRow,
//   TableHeaderCell,
//   TableBody,
//   TableCell,
// } from "@fluentui/react-components";
// import { Add24Regular } from "@fluentui/react-icons";

// const useStyles = makeStyles({
//   container: {
//     marginTop: '20px',
//   },
//   dateContainer: {
//     display: 'flex',
//     gap: '12px',
//     marginBottom: '20px',
//     alignItems: 'flex-end',
//   },
//   expenseForm: {
//     display: 'flex',
//     gap: '12px',
//     marginTop: '20px',
//     alignItems: 'flex-end',
//   },
//   expenses: {
//     marginTop: '20px',
//     width: '100%',
//     overflowX: 'auto',
//   },
//   table: {
//     width: '100%',
//   },
//   deleteButton: {
//     minWidth: 'auto',
//   }
// });

// const DailyView = () => {
//   const styles = useStyles();
//   const { currentUser } = useAuth();
//   const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
//   const [expenses, setExpenses] = useState([]);
//   const [newExpense, setNewExpense] = useState({ itemName: '', amount: '' });
//   const [isLoading, setIsLoading] = useState(false);

//   const fetchExpenses = async () => {
//     setIsLoading(true);
//     try {
//       const response = await fetch(
//         `https://expensetrackerbackend-uptz.onrender.com/api/expense/getExpensesByDateAndEmail/${selectedDate}/${currentUser.email}`
//       );
//       // If the response is plain text (No Expense Found)
//       if (response.status === 404) {
//         setExpenses([]);  // Set expenses to empty array
//       } else {
//         const data = await response.json();  // Otherwise, parse as JSON
//         setExpenses(Array.isArray(data) ? data : []);
//       }
//     } catch (error) {
//       console.error('Error fetching expenses:', error);
//     } finally {
//       setIsLoading(false);
//     }
//   };




//   const addExpense = async () => {
//     if (!newExpense.itemName || !newExpense.amount) return;

//     setIsLoading(true);
//     try {
//       // Format the date in dd-MM-yyyy format
//       const formattedDate = new Date(selectedDate)
//         .toLocaleDateString('en-GB')  // 'en-GB' locale provides dd-MM-yyyy format
//         .split('/').join('-'); // Converts the date to dd-MM-yyyy format
//       const response = await fetch('https://expensetrackerbackend-uptz.onrender.com/api/expense/addExpense', {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({
//           itemName: newExpense.itemName,
//           amount: parseFloat(newExpense.amount),
//           date: formattedDate, // Use the formatted date
//           userEmail: currentUser.email,
//         }),
//       });

//       if (response.ok) {
//         setNewExpense({ itemName: '', amount: '' });
//         fetchExpenses();
//       }
//     } catch (error) {
//       console.error('Error adding expense:', error);
//     } finally {
//       setIsLoading(false);
//     }
//   };


//   const deleteExpense = async (id) => {
//     setIsLoading(true);
//     try {
//       const response = await fetch(
//         `https://expensetrackerbackend-uptz.onrender.com/api/expense/deleteExpense/${id}`,
//         { method: 'DELETE' }
//       );
//       if (response.ok) {
//         fetchExpenses();
//       }
//     } catch (error) {
//       console.error('Error deleting expense:', error);
//     } finally {
//       setIsLoading(false);
//     }
//   };

//   useEffect(() => {
//     fetchExpenses();
//   }, [selectedDate]);

//   return (
//     <div className={styles.container}>
//       <div className={styles.dateContainer}>
//         <Field label="Select Date">
//           <Input
//             type="date"
//             value={selectedDate}
//             onChange={(e) => setSelectedDate(e.target.value)}
//             disabled={isLoading}
//           />
//         </Field>
//         <Button onClick={fetchExpenses} disabled={isLoading}>
//           {isLoading ? 'Loading...' : 'Go'}
//         </Button>
//       </div>

//       <div className={styles.expenses}>
//         <Table className={styles.table}>
//           <TableHeader>
//             <TableRow>
//               <TableHeaderCell>Item</TableHeaderCell>
//               <TableHeaderCell>Amount (INR)</TableHeaderCell>
//               <TableHeaderCell>Actions</TableHeaderCell>
//             </TableRow>
//           </TableHeader>
//           <TableBody>
//             {expenses.map((expense) => (
//               <TableRow key={expense.id}>
//                 <TableCell>{expense.itemName}</TableCell>
//                 <TableCell>{expense.amount.toFixed(2)}</TableCell>
//                 <TableCell>
//                   <Button
//                     appearance="subtle"
//                     onClick={() => deleteExpense(expense.id)}
//                     disabled={isLoading}
//                     className={styles.deleteButton}
//                   >
//                     Delete
//                   </Button>
//                 </TableCell>
//               </TableRow>
//             ))}
//             {expenses.length === 0 && (
//               <TableRow>
//                 <TableCell colSpan={3}>
//                   <Text align="center">No expenses found for this date</Text>
//                 </TableCell>
//               </TableRow>
//             )}
//           </TableBody>
//         </Table>
//       </div>

//       <div className={styles.expenseForm}>
//         <Field label="Item Name">
//           <Input
//             value={newExpense.itemName}
//             onChange={(e) => setNewExpense({ ...newExpense, itemName: e.target.value })}
//             placeholder="Enter item name"
//             disabled={isLoading}
//           />
//         </Field>
//         <Field label="Amount">
//           <Input
//             type="number"
//             value={newExpense.amount}
//             onChange={(e) => setNewExpense({ ...newExpense, amount: e.target.value })}
//             placeholder="Enter amount"
//             disabled={isLoading}
//           />
//         </Field>
//         <Button
//           icon={<Add24Regular />}
//           onClick={addExpense}
//           appearance="primary"
//           disabled={isLoading}
//         >
//           Add Expense
//         </Button>
//       </div>
//     </div>
//   );
// };

// export default DailyView;



// import React, { useState, useEffect } from 'react';
// import { useAuth } from '../../contexts/authContext';
// import {
//     makeStyles,
//     Button,
//     Text,
//     Field,
//     Table,
//     TableHeader,
//     TableRow,
//     TableHeaderCell,
//     TableBody,
//     TableCell,
//     Spinner,
//     Dropdown,
//     Option,
// } from "@fluentui/react-components";
// import { Add24Regular, Delete24Regular, CalendarRegular } from "@fluentui/react-icons";
// import { use } from 'react';

// const useStyles = makeStyles({
//     container: {
//         marginTop: '20px',
//     },
//     dateContainer: {
//         display: 'flex',
//         gap: '12px',
//         marginBottom: '20px',
//         alignItems: 'flex-end',
//         '@media (max-width: 768px)': {
//             flexDirection: 'column',
//             gap: '8px',
//             '& > *': {
//                 width: '100%',
//             },
//         },
//     },
//     total: {
//         textAlign: 'right',
//         fontSize: '18px',
//         fontWeight: 'bold',
//         marginTop: '20px',
//         '@media (max-width: 768px)': {
//             textAlign: 'right',
//         }
//     },
//     deleteButton: {
//         minWidth: 'auto',
//     },

// });

// const MonthlyView = () => {
//     const styles = useStyles();
//     const { currentUser } = useAuth();
//     const [selectedMonth, setSelectedMonth] = useState((new Date().getMonth() + 1).toString()); // 1-based months
//     const [selectedYear, setSelectedYear] = React.useState(new Date().getFullYear());
//     const [expenses, setExpenses] = React.useState([]);
//     const [loading, setLoading] = React.useState(true);

//     const fetchExpenses = async () => {
//         setLoading(true);
//         try {
//             const response = await fetch(`https://expensetrackerbackend-uptz.onrender.com/api/expense/getExpensesByMonthAndEmail/${selectedMonth}/${selectedYear}/${currentUser.email}`);
//             if (response.status == 404) {
//                 setExpenses([]);
//                 setLoading(false);
//                 return;
//             } else {
//                 const data = await response.json();
//                 setExpenses(data);
//                 setLoading(false);
//             }
//         } catch (e) {
//             console.log(e);
//         } finally {
//             setLoading(false);
//         }


//     };
//     const getTotalExpense = () => {
//         return expenses.reduce((total, expense) => total + expense.amount, 0).toFixed(2);
//     };
//     const generateYearOptions = () => {
//         const currentYear = new Date().getFullYear();
//         const years = [];
//         for (let year = 2025; year <= currentYear + 5; year++) {
//             years.push(year.toString());
//         }
//         return years;
//     };

//     const deleteExpense = async (id) => {
//         setLoading(true);
//         try {
//             const response = await fetch(
//                 `https://expensetrackerbackend-uptz.onrender.com/api/expense/deleteExpense/${id}`,
//                 { method: 'DELETE' }
//             );
//             if (response.ok) {
//                 fetchExpenses();
//             }
//         } catch (error) {
//             console.error('Error deleting expense:', error);
//         } finally {
//             setLoading(false);
//         }
//     };
//     useEffect(() => {
//         fetchExpenses();
//     }, [selectedMonth, selectedYear]);
//     return (
//         <div className={styles.container}>
//             <div className={styles.dateContainer}>
//                 <Field label="Month">
//                     <Dropdown

//                         selectedOptions={[selectedMonth]} // Store the numeric value (e.g., '01')
//                         placeholder={
//                             [
//                                 { name: "January", value: "01" },
//                                 { name: "February", value: "02" },
//                                 { name: "March", value: "03" },
//                                 { name: "April", value: "04" },
//                                 { name: "May", value: "05" },
//                                 { name: "June", value: "06" },
//                                 { name: "July", value: "07" },
//                                 { name: "August", value: "08" },
//                                 { name: "September", value: "09" },
//                                 { name: "October", value: "10" },
//                                 { name: "November", value: "11" },
//                                 { name: "December", value: "12" },
//                             ].find((month) => month.value === selectedMonth)?.name || "Select a month"
//                         } onOptionSelect={(_, data) => setSelectedMonth(data.optionValue)} // Store month as number
//                     >
//                         {[
//                             { name: "January", value: "01" },
//                             { name: "February", value: "02" },
//                             { name: "March", value: "03" },
//                             { name: "April", value: "04" },
//                             { name: "May", value: "05" },
//                             { name: "June", value: "06" },
//                             { name: "July", value: "07" },
//                             { name: "August", value: "08" },
//                             { name: "September", value: "09" },
//                             { name: "October", value: "10" },
//                             { name: "November", value: "11" },
//                             { name: "December", value: "12" },
//                         ].map((month) => (
//                             <Option key={month.value} value={month.value}>
//                                 {month.name}
//                             </Option>
//                         ))}
//                     </Dropdown>
//                 </Field>

//                 <Field label="Year">
//                     <Dropdown
//                         selectedOptions={[selectedYear]} // Store year as a string
//                         placeholder={selectedYear ? selectedYear : 'Select a year'}
//                         onOptionSelect={(_, data) => setSelectedYear(data.optionValue)} // Update state with selected year
//                     >
//                         {generateYearOptions().map((year) => (
//                             <Option key={year} value={year.toString()}>
//                                 {year}
//                             </Option>
//                         ))}
//                     </Dropdown>
//                 </Field>

//                 <Button onClick={fetchExpenses}>Fetch</Button>
//             </div>

//             <div className={styles.expenses}>
//                 {loading ? (
//                     <Spinner />
//                 ) : (
//                     <>
//                         <Table className={styles.table}>
//                             <TableHeader>
//                                 <TableRow>
//                                     <TableHeaderCell>Sl.No.</TableHeaderCell>
//                                     <TableHeaderCell>Date</TableHeaderCell>
//                                     <TableHeaderCell>Item Name</TableHeaderCell>
//                                     <TableHeaderCell>Amount</TableHeaderCell>
//                                     <TableHeaderCell>Action</TableHeaderCell>
//                                 </TableRow>
//                             </TableHeader>
//                             <TableBody>
//                                 {expenses.map((expense) => (
//                                     <TableRow key={expense._id}>
//                                         <TableCell>{expenses.indexOf(expense) + 1}</TableCell>
//                                         <TableCell>{expense.date}</TableCell>
//                                         <TableCell>{expense.itemName}</TableCell>
//                                         <TableCell>{expense.amount}</TableCell>
//                                         <TableCell>
//                                             <Button
//                                                 appearance="subtle"
//                                                 onClick={() => deleteExpense(expense.id)}
//                                                 disabled={loading}
//                                                 className={styles.deleteButton}
//                                                 icon={<Delete24Regular />}

//                                             >
//                                                 Delete
//                                             </Button>                                        </TableCell>
//                                     </TableRow>
//                                 ))}
//                             </TableBody>
//                         </Table>
//                         <div className={styles.total}>Total:₹{getTotalExpense()}</div>
//                     </>
//                 )}
//             </div>
//         </  div>
//     );
// };

// export default MonthlyView;